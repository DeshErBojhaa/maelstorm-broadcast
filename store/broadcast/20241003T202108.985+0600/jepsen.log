2024-10-03 20:21:09,054{GMT}	INFO	[jepsen test runner] jepsen.core: Command line:
lein run test -w broadcast --bin ./bin/main --time-limit 20 --rate 10 --node-count 1 --availability total --nemesis partition
2024-10-03 20:21:09,100{GMT}	INFO	[jepsen test runner] jepsen.core: Running test:
{:args []
 :remote
 #jepsen.control.retry.Remote{:remote #jepsen.control.scp.Remote{:cmd-remote #jepsen.control.sshj.SSHJRemote{:concurrency-limit 6,
                                                                                                             :conn-spec nil,
                                                                                                             :client nil,
                                                                                                             :semaphore nil},
                                                                 :conn-spec nil},
                              :conn nil}
 :log-net-send false
 :node-count 1
 :availability :total
 :max-txn-length 4
 :concurrency 1
 :db
 #object[maelstrom.db$db$reify__16142
         "0x7aac05e2"
         "maelstrom.db$db$reify__16142@7aac05e2"]
 :max-writes-per-key 16
 :leave-db-running? false
 :name "broadcast"
 :logging-json? false
 :start-time
 #object[org.joda.time.DateTime "0x4867e76b" "2024-10-03T20:21:08.985+06:00"]
 :nemesis-interval 10
 :net
 #object[maelstrom.net$jepsen_net$reify__15251
         "0x6ba3eee9"
         "maelstrom.net$jepsen_net$reify__15251@6ba3eee9"]
 :client
 #object[maelstrom.workload.broadcast$client$reify__16644
         "0x1d628a88"
         "maelstrom.workload.broadcast$client$reify__16644@1d628a88"]
 :barrier
 #object[java.util.concurrent.CyclicBarrier
         "0x3c634a04"
         "java.util.concurrent.CyclicBarrier@3c634a04"]
 :log-stderr false
 :pure-generators true
 :ssh {:dummy? true}
 :rate 10.0
 :checker
 #object[jepsen.checker$compose$reify__11881
         "0x4b48be5c"
         "jepsen.checker$compose$reify__11881@4b48be5c"]
 :argv
 ("test"
  "-w"
  "broadcast"
  "--bin"
  "./bin/main"
  "--time-limit"
  "20"
  "--rate"
  "10"
  "--node-count"
  "1"
  "--availability"
  "total"
  "--nemesis"
  "partition")
 :nemesis
 (jepsen.nemesis.ReflCompose
  {:fm {:start-partition 0,
        :stop-partition 0,
        :kill 1,
        :start 1,
        :pause 1,
        :resume 1},
   :nemeses [#unprintable "jepsen.nemesis.combined$partition_nemesis$reify__16416@3fe8d57a"
             #unprintable "jepsen.nemesis.combined$db_nemesis$reify__16397@36573ec5"]})
 :nodes ["n0"]
 :test-count 1
 :latency {:mean 0, :dist :constant}
 :bin "./bin/main"
 :generator
 ((jepsen.generator.Synchronize
   {:gen (jepsen.generator.TimeLimit
          {:limit 20000000000,
           :cutoff nil,
           :gen (jepsen.generator.Any
                 {:gens [(jepsen.generator.OnThreads
                          {:f #{:nemesis},
                           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                                   "0x49e3b86b"
                                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@49e3b86b"],
                           :gen (jepsen.generator.Stagger
                                 {:dt 20000000000,
                                  :next-time nil,
                                  :gen (jepsen.generator.FlipFlop
                                        {:gens [#object[jepsen.nemesis.combined$partition_package$start__16420
                                                        "0x64b262a7"
                                                        "jepsen.nemesis.combined$partition_package$start__16420@64b262a7"]
                                                ({:type :info,
                                                  :f :stop-partition,
                                                  :value nil}
                                                 {:type :info,
                                                  :f :stop-partition,
                                                  :value nil}
                                                 {:type :info,
                                                  :f :stop-partition,
                                                  :value nil}
                                                 {:type :info,
                                                  :f :stop-partition,
                                                  :value nil}
                                                 {:type :info,
                                                  :f :stop-partition,
                                                  :value nil}
                                                 {:type :info,
                                                  :f :stop-partition,
                                                  :value nil}
                                                 {:type :info,
                                                  :f :stop-partition,
                                                  :value nil}
                                                 {:type :info,
                                                  :f :stop-partition,
                                                  :value nil}
                                                 ...)],
                                         :i 0})})})
                         (jepsen.generator.OnThreads
                          {:f #jepsen.generator.context.AllBut{:element :nemesis},
                           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                                   "0x34d776eb"
                                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@34d776eb"],
                           :gen (jepsen.generator.Stagger
                                 {:dt 200000000,
                                  :next-time nil,
                                  :gen (jepsen.generator.Mix
                                        {:i 1,
                                         :gens [({:f :broadcast, :value 0}
                                                 {:f :broadcast, :value 1}
                                                 {:f :broadcast, :value 2}
                                                 {:f :broadcast, :value 3}
                                                 {:f :broadcast, :value 4}
                                                 {:f :broadcast, :value 5}
                                                 {:f :broadcast, :value 6}
                                                 {:f :broadcast, :value 7}
                                                 ...)
                                                ({:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 ...)]})})})]})})})
  (jepsen.generator.Synchronize
   {:gen (jepsen.generator.OnThreads
          {:f #{:nemesis},
           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                   "0x60a3a0fa"
                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@60a3a0fa"],
           :gen ({:type :info, :f :stop-partition, :value nil})})})
  (jepsen.generator.Synchronize
   {:gen {:type :log, :value "Waiting for recovery..."}})
  (jepsen.generator.Synchronize {:gen {:type :sleep, :value 10}})
  (jepsen.generator.Synchronize
   {:gen (jepsen.generator.OnThreads
          {:f #jepsen.generator.context.AllBut{:element :nemesis},
           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                   "0x17734113"
                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@17734113"],
           :gen (jepsen.generator.EachThread
                 {:fresh-gen {:f :read, :final? true},
                  :context-filters #object[clojure.core$promise$reify__8591
                                           "0x27aa700"
                                           {:status :pending, :val nil}],
                  :gens {}})})}))
 :log-net-recv false
 :os
 #object[maelstrom.net$jepsen_os$reify__15254
         "0xd15f98a"
         "maelstrom.net$jepsen_os$reify__15254@d15f98a"]
 :time-limit 20
 :workload :broadcast
 :consistency-models [:strict-serializable]
 :topology :grid}

2024-10-03 20:21:09,954{GMT}	INFO	[jepsen node n0] maelstrom.net: Starting Maelstrom network
2024-10-03 20:21:09,955{GMT}	INFO	[jepsen test runner] jepsen.db: Tearing down DB
2024-10-03 20:21:09,956{GMT}	INFO	[jepsen test runner] jepsen.db: Setting up DB
2024-10-03 20:21:09,957{GMT}	INFO	[jepsen node n0] maelstrom.service: Starting services: (lin-kv lin-tso lww-kv seq-kv)
2024-10-03 20:21:09,957{GMT}	INFO	[jepsen node n0] maelstrom.db: Setting up n0
2024-10-03 20:21:09,958{GMT}	INFO	[jepsen node n0] maelstrom.process: launching ./bin/main []
2024-10-03 20:21:10,619{GMT}	INFO	[jepsen test runner] jepsen.core: Relative time begins now
2024-10-03 20:21:10,634{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:start-partition	:one
2024-10-03 20:21:10,634{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:read	nil
2024-10-03 20:21:10,637{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:read	nil
2024-10-03 20:21:10,637{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:start-partition	[:isolated {"n0" #{}}]
2024-10-03 20:21:10,698{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:read	nil
2024-10-03 20:21:10,698{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:read	nil
2024-10-03 20:21:10,737{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:broadcast	0
2024-10-03 20:21:15,742{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:info	:broadcast	0	:net-timeout
2024-10-03 20:21:15,742{GMT}	INFO	[jepsen worker 0] jepsen.util: 1	:invoke	:broadcast	1
2024-10-03 20:21:19,466{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:stop-partition	nil
2024-10-03 20:21:19,466{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:stop-partition	:network-healed
2024-10-03 20:21:20,747{GMT}	INFO	[jepsen worker 0] jepsen.util: 1	:info	:broadcast	1	:net-timeout
2024-10-03 20:21:20,747{GMT}	INFO	[jepsen worker 0] jepsen.util: 2	:invoke	:broadcast	2
2024-10-03 20:21:25,747{GMT}	INFO	[jepsen worker 0] jepsen.util: 2	:info	:broadcast	2	:net-timeout
2024-10-03 20:21:25,747{GMT}	INFO	[jepsen worker 0] jepsen.util: 3	:invoke	:read	nil
2024-10-03 20:21:30,747{GMT}	INFO	[jepsen worker 0] jepsen.util: 3	:fail	:read	nil	:net-timeout
2024-10-03 20:21:30,747{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:stop-partition	nil
2024-10-03 20:21:30,747{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:stop-partition	:network-healed
2024-10-03 20:21:30,747{GMT}	INFO	[jepsen worker nemesis] jepsen.generator.interpreter: Waiting for recovery...
2024-10-03 20:21:40,755{GMT}	INFO	[jepsen worker 0] jepsen.util: 3	:invoke	:read	nil
2024-10-03 20:21:45,759{GMT}	INFO	[jepsen worker 0] jepsen.util: 3	:fail	:read	nil	:net-timeout
2024-10-03 20:21:45,774{GMT}	INFO	[jepsen test runner] jepsen.core: Run complete, writing
2024-10-03 20:21:45,801{GMT}	INFO	[jepsen node n0] maelstrom.db: Tearing down n0
2024-10-03 20:21:46,784{GMT}	INFO	[jepsen node n0] maelstrom.net: Shutting down Maelstrom network
2024-10-03 20:21:46,787{GMT}	WARN	[jepsen test runner] jepsen.core: Test crashed!
clojure.lang.ExceptionInfo: Node n0 crashed with exit status 2. Before crashing, it wrote to STDOUT:

{"src":"n0","dest":"c0","body":{"in_reply_to":1,"type":"init_ok"}}
{"src":"n0","dest":"c1","body":{"in_reply_to":1,"type":"topology_ok"}}
{"src":"n0","dest":"c2","body":{"in_reply_to":1,"messages":null,"type":"read_ok"}}
{"src":"n0","dest":"c2","body":{"in_reply_to":2,"messages":null,"type":"read_ok"}}

And to STDERR:

2024/10/03 20:21:10 Received {c0 n0 {"type":"init","node_id":"n0","node_ids":["n0"],"msg_id":1}}
2024/10/03 20:21:10 Node n0 initialized
2024/10/03 20:21:10 Sent {"src":"n0","dest":"c0","body":{"in_reply_to":1,"type":"init_ok"}}
2024/10/03 20:21:10 Received {c1 n0 {"type":"topology","topology":{"n0":[]},"msg_id":1}}
2024/10/03 20:21:10 Sent {"src":"n0","dest":"c1","body":{"in_reply_to":1,"type":"topology_ok"}}
2024/10/03 20:21:10 Received {c2 n0 {"type":"read","msg_id":1}}
2024/10/03 20:21:10 Sent {"src":"n0","dest":"c2","body":{"in_reply_to":1,"messages":null,"type":"read_ok"}}
2024/10/03 20:21:10 Received {c2 n0 {"type":"read","msg_id":2}}
2024/10/03 20:21:10 Sent {"src":"n0","dest":"c2","body":{"in_reply_to":2,"messages":null,"type":"read_ok"}}
2024/10/03 20:21:10 Received {c2 n0 {"type":"broadcast","message":0,"msg_id":3}}
panic: interface conversion: interface {} is nil, not int

goroutine 38 [running]:
main.main.func1({{0x140001203a8, 0x2}, {0x140001203aa, 0x2}, {0x14000136030, 0x2b, 0x30}})
	/Users/tamjidahmed/code/maelstorm/broadcase/main.go:24 +0x270
github.com/jepsen-io/maelstrom/demo/go.(*Node).handleMessage(0x1400013a000, 0x0?, {{0x140001203a8, 0x2}, {0x140001203aa, 0x2}, {0x14000136030, 0x2b, 0x30}})
	/Users/tamjidahmed/go/pkg/mod/github.com/jepsen-io/maelstrom/demo/go@v0.0.0-20240813160128-8b9e94c75e59/node.go:151 +0x6c
github.com/jepsen-io/maelstrom/demo/go.(*Node).Run.func2()
	/Users/tamjidahmed/go/pkg/mod/github.com/jepsen-io/maelstrom/demo/go@v0.0.0-20240813160128-8b9e94c75e59/node.go:129 +0x78
created by github.com/jepsen-io/maelstrom/demo/go.(*Node).Run in goroutine 1
	/Users/tamjidahmed/go/pkg/mod/github.com/jepsen-io/maelstrom/demo/go@v0.0.0-20240813160128-8b9e94c75e59/node.go:127 +0x468

Full STDERR logs are available in /Users/tamjidahmed/code/maelstorm/broadcase/store/broadcast/20241003T202108.985+0600/node-logs/n0.log
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.process$stop_node_BANG_.invokeStatic(process.clj:239)
	at maelstrom.process$stop_node_BANG_.invoke(process.clj:217)
	at maelstrom.db$db$reify__16142.teardown_BANG_(db.clj:75)
	at jepsen.db$fn__8744$G__8725__8748.invoke(db.clj:12)
	at jepsen.db$fn__8744$G__8724__8753.invoke(db.clj:12)
	at clojure.core$partial$fn__5908.invoke(core.clj:2642)
	at jepsen.control$on_nodes$fn__8599.invoke(control.clj:314)
	at clojure.lang.AFn.applyToHelper(AFn.java:154)
	at clojure.lang.AFn.applyTo(AFn.java:144)
	at clojure.core$apply.invokeStatic(core.clj:667)
	at clojure.core$with_bindings_STAR_.invokeStatic(core.clj:1990)
	at clojure.core$with_bindings_STAR_.doInvoke(core.clj:1990)
	at clojure.lang.RestFn.applyTo(RestFn.java:142)
	at clojure.core$apply.invokeStatic(core.clj:671)
	at clojure.core$bound_fn_STAR_$fn__5818.doInvoke(core.clj:2020)
	at clojure.lang.RestFn.invoke(RestFn.java:408)
	at dom_top.core$real_pmap_helper$build_thread__211$fn__212.invoke(core.clj:163)
	at clojure.lang.AFn.applyToHelper(AFn.java:152)
	at clojure.lang.AFn.applyTo(AFn.java:144)
	at clojure.core$apply.invokeStatic(core.clj:667)
	at clojure.core$with_bindings_STAR_.invokeStatic(core.clj:1990)
	at clojure.core$with_bindings_STAR_.doInvoke(core.clj:1990)
	at clojure.lang.RestFn.invoke(RestFn.java:425)
	at clojure.lang.AFn.applyToHelper(AFn.java:156)
	at clojure.lang.RestFn.applyTo(RestFn.java:132)
	at clojure.core$apply.invokeStatic(core.clj:671)
	at clojure.core$bound_fn_STAR_$fn__5818.doInvoke(core.clj:2020)
	at clojure.lang.RestFn.invoke(RestFn.java:397)
	at clojure.lang.AFn.run(AFn.java:22)
	at java.base/java.lang.Thread.run(Thread.java:1583)
